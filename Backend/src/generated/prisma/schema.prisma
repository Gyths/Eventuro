// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ====================== Enums ======================
enum GENDER {
  M // male
  F // female
  O // other
}

enum STATUS_USER {
  A // active
  S // suspended
  D // deleted
}

enum ID_TYPE {
  RUC
  DNI
}

enum ACCESS_POLICY {
  E //everyone: todo el mundo
  T //teenagers: mayores a 14 con compañia adulta
  AO //adults only: mayores a 18
}

enum EVENT_STATUS {
  P //pending: pendiente
  A //acepted: aceptado
  D //denied: denegado
}

enum ZONE_KIND {
  GENERAL //aforo
  SEATED //asientos numerados
}

enum CURRENCY {
  S
  USD
}

// ====================== Models ======================

// Usuario general
model User {
  userId    BigInt      @id @default(autoincrement()) @db.BigInt
  name      String
  lastName  String
  phone     String?
  email     String      @unique
  birthdate DateTime?
  gender    GENDER?
  status    STATUS_USER @default(A)

  // Relaciones
  password  PasswordUser?
  oauths    OAuthUser[]
  organizer Organizer?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Usuario con login por contraseña (1:1 con User)
model PasswordUser {
  userId         BigInt @id @db.BigInt
  hashedPassword String

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

// Usuario con login externo OAuth (Google, etc.)
model OAuthUser {
  id             Int    @id @default(autoincrement())
  userId         BigInt @db.BigInt
  provider       String
  providerUserId String

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@index([userId])
}

// Organizador (1:1 con User)
model Organizer {
  organizerId BigInt  @id @default(autoincrement()) @db.BigInt
  userId      BigInt  @unique @db.BigInt
  companyName String
  idType      ID_TYPE
  idNumber    String  @unique

  user   User    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  events Event[]
}

// Categorías de un evento
model EventCategory {
  eventCategoryId BigInt @id @default(autoincrement()) @db.BigInt
  initials        String @unique
  description     String

  //relaciones
  events EventToCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//Tabla intermedia entre Evento y Categorías
model EventToCategory {
  eventId         BigInt @db.BigInt
  eventCategoryId BigInt @db.BigInt

  //relaciones
  event    Event         @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  category EventCategory @relation(fields: [eventCategoryId], references: [eventCategoryId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([eventId, eventCategoryId])
}

// Local de un evento
model Venue {
  venueId    BigInt  @id @default(autoincrement()) @db.BigInt
  eventId    BigInt  @unique @db.BigInt
  city       String?
  address    String?
  addressUrl String?
  reference  String?
  capacity   Int

  //relacion
  event Event @relation("EventVenue", fields: [eventId], references: [eventId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

//tarifa
model Fee {
  feeId      BigInt  @id @default(autoincrement()) @db.BigInt
  percentage Decimal @db.Decimal(10, 2)

  //relacion
  event Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Evento
model Event {
  eventId                 BigInt        @id @default(autoincrement()) @db.BigInt
  organizerId             BigInt        @db.BigInt
  feeId                   BigInt?       @db.BigInt
  title                   String
  status                  EVENT_STATUS  @default(P)
  inPerson                Boolean
  description             String
  accessPolicy            ACCESS_POLICY
  accessPolicyDescription String?

  //Relaciones
  organizer   Organizer         @relation(fields: [organizerId], references: [organizerId])
  venue       Venue?            @relation("EventVenue")
  fee         Fee?              @relation(fields: [feeId], references: [feeId], onDelete: SetNull)
  categories  EventToCategory[]
  dates       EventDate[]
  salesPhases EventSalesPhase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([organizerId])
  @@index([feeId])
  @@index([title])
}

model EventDate {
  eventDateId BigInt   @id @default(autoincrement()) @db.BigInt
  eventId     BigInt   @db.BigInt
  startAt     DateTime
  endAt       DateTime

  //relaciones
  event     Event           @relation(fields: [eventId], references: [eventId], onDelete: Cascade)
  zoneDates EventDateZone[]

  @@index([eventId, startAt])
}

model EventDateZone {
  eventDateZoneId   BigInt    @id @default(autoincrement()) @db.BigInt
  eventDateId       BigInt    @db.BigInt
  name              String
  kind              ZONE_KIND
  basePrice         Decimal   @db.Decimal(10, 2)
  capacity          Int
  capacityRemaining Int
  seatMapId         BigInt?   @unique @db.BigInt
  currency          CURRENCY

  //relaciones
  eventDate   EventDate                 @relation(fields: [eventDateId], references: [eventDateId], onDelete: Cascade)
  seatMap     SeatMap?                  @relation(fields: [seatMapId], references: [seatMapId], onDelete: SetNull)
  allocations EventDateZoneAllocation[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SeatMap {
  seatMapId BigInt @id @default(autoincrement()) @db.BigInt
  rows      Int
  cols      Int

  //relaciones
  occupiedSeats Seat[]
  EventDateZone EventDateZone?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Seat {
  seatId    BigInt @id @default(autoincrement()) @db.BigInt
  seatMapId BigInt @db.BigInt
  rowNumber Int
  colNumber Int

  //relaciones
  seatMap SeatMap @relation(fields: [seatMapId], references: [seatMapId], onDelete: Cascade)

  @@unique([seatMapId, rowNumber, colNumber])
  @@index([seatMapId])
}

model EventDateZoneAllocation {
  eventDateZoneAllocationId BigInt  @id @default(autoincrement()) @db.BigInt
  eventDateZoneId           BigInt  @db.BigInt
  audienceName              String
  discountPercent           Decimal @db.Decimal(5, 2)
  allocatedQuantity         Int
  remainingQuantity         Int?

  //relaciones
  zone EventDateZone @relation(fields: [eventDateZoneId], references: [eventDateZoneId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventDateZoneId, audienceName])
}

//se deberia dis
model EventSalesPhase {
  eventSalesPhaseId BigInt    @id @default(autoincrement()) @db.BigInt
  eventId           BigInt    @db.BigInt
  name              String
  startAt           DateTime?
  endAt             DateTime?
  percentage        Decimal   @db.Decimal(10, 2)
  active            Boolean   @default(false)

  event Event @relation(fields: [eventId], references: [eventId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([eventId, startAt])
}
