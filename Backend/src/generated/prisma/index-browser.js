
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  userId: 'userId',
  name: 'name',
  lastName: 'lastName',
  phone: 'phone',
  email: 'email',
  birthdate: 'birthdate',
  gender: 'gender',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PasswordUserScalarFieldEnum = {
  userId: 'userId',
  hashedPassword: 'hashedPassword'
};

exports.Prisma.OAuthUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  provider: 'provider',
  providerUserId: 'providerUserId'
};

exports.Prisma.OrganizerScalarFieldEnum = {
  organizerId: 'organizerId',
  userId: 'userId',
  companyName: 'companyName',
  idType: 'idType',
  idNumber: 'idNumber'
};

exports.Prisma.EventCategoryScalarFieldEnum = {
  eventCategoryId: 'eventCategoryId',
  initials: 'initials',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventToCategoryScalarFieldEnum = {
  eventId: 'eventId',
  eventCategoryId: 'eventCategoryId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VenueScalarFieldEnum = {
  venueId: 'venueId',
  eventId: 'eventId',
  city: 'city',
  address: 'address',
  addressUrl: 'addressUrl',
  reference: 'reference',
  capacity: 'capacity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FeeScalarFieldEnum = {
  feeId: 'feeId',
  percentage: 'percentage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventScalarFieldEnum = {
  eventId: 'eventId',
  organizerId: 'organizerId',
  feeId: 'feeId',
  title: 'title',
  status: 'status',
  inPerson: 'inPerson',
  description: 'description',
  accessPolicy: 'accessPolicy',
  accessPolicyDescription: 'accessPolicyDescription',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventDateScalarFieldEnum = {
  eventDateId: 'eventDateId',
  eventId: 'eventId',
  startAt: 'startAt',
  endAt: 'endAt'
};

exports.Prisma.EventDateZoneScalarFieldEnum = {
  eventDateZoneId: 'eventDateZoneId',
  eventDateId: 'eventDateId',
  name: 'name',
  kind: 'kind',
  basePrice: 'basePrice',
  capacity: 'capacity',
  capacityRemaining: 'capacityRemaining',
  seatMapId: 'seatMapId',
  currency: 'currency',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeatMapScalarFieldEnum = {
  seatMapId: 'seatMapId',
  rows: 'rows',
  cols: 'cols',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SeatScalarFieldEnum = {
  seatId: 'seatId',
  seatMapId: 'seatMapId',
  rowNumber: 'rowNumber',
  colNumber: 'colNumber',
  status: 'status',
  holdUntil: 'holdUntil'
};

exports.Prisma.EventDateZoneAllocationScalarFieldEnum = {
  eventDateZoneAllocationId: 'eventDateZoneAllocationId',
  eventDateZoneId: 'eventDateZoneId',
  audienceName: 'audienceName',
  discountPercent: 'discountPercent',
  allocatedQuantity: 'allocatedQuantity',
  remainingQuantity: 'remainingQuantity',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EventSalesPhaseScalarFieldEnum = {
  eventSalesPhaseId: 'eventSalesPhaseId',
  eventId: 'eventId',
  name: 'name',
  startAt: 'startAt',
  endAt: 'endAt',
  percentage: 'percentage',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderScalarFieldEnum = {
  orderId: 'orderId',
  buyerUserId: 'buyerUserId',
  status: 'status',
  currency: 'currency',
  totalAmount: 'totalAmount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OrderItemScalarFieldEnum = {
  orderItemId: 'orderItemId',
  orderId: 'orderId',
  eventId: 'eventId',
  eventDateId: 'eventDateId',
  eventDateZoneId: 'eventDateZoneId',
  eventDateZoneAllocationId: 'eventDateZoneAllocationId',
  quantity: 'quantity',
  seatId: 'seatId',
  unitPrice: 'unitPrice',
  discountAmount: 'discountAmount',
  finalPrice: 'finalPrice'
};

exports.Prisma.TicketScalarFieldEnum = {
  ticketId: 'ticketId',
  ownerUserId: 'ownerUserId',
  orderItemId: 'orderItemId',
  eventId: 'eventId',
  eventDateId: 'eventDateId',
  eventDateZoneId: 'eventDateZoneId',
  eventDateZoneAllocationId: 'eventDateZoneAllocationId',
  seatId: 'seatId',
  pricePaid: 'pricePaid',
  currency: 'currency',
  issuedAt: 'issuedAt',
  status: 'status'
};

exports.Prisma.HoldScalarFieldEnum = {
  holdId: 'holdId',
  eventDateId: 'eventDateId',
  eventDateZoneId: 'eventDateZoneId',
  seatId: 'seatId',
  quantity: 'quantity',
  buyerUserId: 'buyerUserId',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.GENDER = exports.$Enums.GENDER = {
  M: 'M',
  F: 'F',
  O: 'O'
};

exports.STATUS_USER = exports.$Enums.STATUS_USER = {
  A: 'A',
  S: 'S',
  D: 'D'
};

exports.ID_TYPE = exports.$Enums.ID_TYPE = {
  RUC: 'RUC',
  DNI: 'DNI'
};

exports.EVENT_STATUS = exports.$Enums.EVENT_STATUS = {
  P: 'P',
  A: 'A',
  D: 'D'
};

exports.ACCESS_POLICY = exports.$Enums.ACCESS_POLICY = {
  E: 'E',
  T: 'T',
  AO: 'AO'
};

exports.ZONE_KIND = exports.$Enums.ZONE_KIND = {
  GENERAL: 'GENERAL',
  SEATED: 'SEATED'
};

exports.CURRENCY = exports.$Enums.CURRENCY = {
  PEN: 'PEN',
  USD: 'USD'
};

exports.SEAT_STATUS = exports.$Enums.SEAT_STATUS = {
  AVAILABLE: 'AVAILABLE',
  HELD: 'HELD',
  SOLD: 'SOLD'
};

exports.ORDER_STATUS = exports.$Enums.ORDER_STATUS = {
  CREATED: 'CREATED',
  PENDING_PAYMENT: 'PENDING_PAYMENT',
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  EXPIRED: 'EXPIRED'
};

exports.TICKET_STATUS = exports.$Enums.TICKET_STATUS = {
  PAID: 'PAID',
  CANCELLED: 'CANCELLED',
  USED: 'USED',
  EXPIRED: 'EXPIRED'
};

exports.Prisma.ModelName = {
  User: 'User',
  PasswordUser: 'PasswordUser',
  OAuthUser: 'OAuthUser',
  Organizer: 'Organizer',
  EventCategory: 'EventCategory',
  EventToCategory: 'EventToCategory',
  Venue: 'Venue',
  Fee: 'Fee',
  Event: 'Event',
  EventDate: 'EventDate',
  EventDateZone: 'EventDateZone',
  SeatMap: 'SeatMap',
  Seat: 'Seat',
  EventDateZoneAllocation: 'EventDateZoneAllocation',
  EventSalesPhase: 'EventSalesPhase',
  Order: 'Order',
  OrderItem: 'OrderItem',
  Ticket: 'Ticket',
  Hold: 'Hold'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
